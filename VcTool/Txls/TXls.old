//================================================================================================
//	NOK Fanatic Class Libraly
//	FileName	:TXls.cpp
//	Class		:TXls 
// 				:MS-Excel97(bif80)形式ファイル/書き込みクラス
//	作成日		:2000.01.08	Coded by coba
//				2000.07.4 TAKE シート追加ならびにシート名セット関数を追加
//================================================================================================
#include "TXls.h"
#include <stdio.h>

//========================================================================================================
//	TXls::TXls(void)
//	引数　：なし
//	返値　：
//　機能　：コンストラクタ。特に何もせず
//========================================================================================================
TXls::TXls(void)
{
	// 各パラメータのイニシャライズ
	m_Open=FALSE;
	m_Err = 0;

}

//========================================================================================================
//	TXls::~TXls()
//　機能　：ファイルハンドルの解放。
//	引数　：なし
//	返値　：
//========================================================================================================
TXls::~TXls()
{
	Close(FALSE);
}


//========================================================================================================
//	BOOL OpenXls(char* filename, BOOL overwrite);
//  public
//　機能　：書き込みようにエクセルファイルを開く
//	引数１：オープンするエクセルブック名(NULLで終わる拡張子付き。)
//	引数２：ファイルオープンモード 
//			TRUE=filenameが存在する場合は一度クリアしてから開き、無いは新規に開く 
//			FALSE=filenameが存在する場合はそのまま開き、無い場合は開かない
//	返値　：TRUE=成功、FALSE=失敗
//========================================================================================================
BOOL TXls::OpenXls(char* filename, BOOL overwrite)
{

	m_Err = 0;

	// すでにオープンしてある
	if( m_Open ){
		m_Err = -1;		return(FALSE);
	}

	// ファイル名のチェック
	if( filename==NULL ){
		m_Err = -2;		return(FALSE);
	}

	// ファイル名のチェックその２
	if( !strlen(filename)){
		m_Err = -2;		return(FALSE);
	}

	// 新規作成モード
	if( overwrite ){
		if( !XlsCreateBook(filename, ver97, 3, &m_XlsID)){
			SetErrCode();return(FALSE);
		}
	}

	// 既存ファイルオープンモード
	else{
		if(!XlsOpenBook(filename,NULL, &m_XlsID)){
			SetErrCode();return(FALSE);
		}
	}

	// 成功
	m_Open=TRUE;
	return(TRUE);
}

//========================================================================================================
//	BOOL AddSheet(long Page);
//  public
//　機能　：ｵｰﾌﾟﾝ中のエクセルファイルにシートを追加する
//	引数１：エクセルシート数
//	返値　：TRUE=成功、FALSE=失敗
//========================================================================================================
BOOL TXls::AddSheet(long Page)
{
	if( m_Open!=TRUE ) 	return(FALSE);

	m_Err = XlsAddSheet(Page);
	if(m_Err==FALSE){
		SetErrCode();
		return(FALSE);
	}
	return TRUE;
}
//========================================================================================================
//	BOOL SetSheetName(char* Sheetname);
//  public
//　機能　：エクセルファイルのシートに名前を付ける
//	引数１：エクセルシート名(NULLで終わる拡張子付き。)
//	返値　：TRUE=成功、FALSE=失敗
//========================================================================================================
BOOL TXls::SetSheetName(char* SheetName)
{
	if( m_Open!=TRUE ) 	return(FALSE);

	m_Err = XlsPutSheetName(SheetName);
	if(m_Err==FALSE){
		SetErrCode();
		return(FALSE);
	}
	return TRUE;
}
//========================================================================================================
//	BOOL SetSheetNo(long Page);
//  public
//　機能　：エクセルファイルブック内シートの選択
//	引数１：シートのNo.-1 (Sheet４だったら３)
//	返値　：TRUE=成功、FALSE=失敗
//========================================================================================================
BOOL TXls::SetSheetNo(long Page)
{
	if( m_Open!=TRUE ) 	return(FALSE);

	m_Err = XlsSheetNo(Page);
	if(m_Err==FALSE){
		SetErrCode();
		return(FALSE);
	}
	return TRUE;
}
//========================================================================================================
//	BOOL TXls::OpenXlsByTemplate(char* filename, char* templatefile,BOOL overwrite)
//  public
//　機能　：既存のファイルをテンプレートにして、書き込み用にエクセルファイルを開く
//	引数１：オープンするエクセルブック名(NULLで終わる拡張子付き。)
//	引数２：テンプレートとなるエクセルブック名(NULLで終わる拡張子付き。)
//	引数３：ファイルオープンモード 
//			TRUE=filenameが存在する場合は一度クリアして開き、無いは新規に開く 
//			FALSE=filenameが存在する場合は開かない
//	返値　：TRUE=成功、FALSE=失敗
//========================================================================================================
BOOL TXls::OpenXlsByTemplate(char* filename, char* templatefile,BOOL overwrite)
{
	WIN32_FIND_DATA fd;
	HANDLE hFind;

	m_Err = 0;

	// すでにオープンしてある
	if( m_Open ){
		m_Err = -1;		return(FALSE);
	}

	// ファイル名のチェック
	if( filename==NULL || templatefile==NULL){
		m_Err = -2;		return(FALSE);
	}

	// ファイル名のチェックその２
	if( !strlen(filename) || !strlen(templatefile)){
		m_Err = -2;		return(FALSE);
	}

	// overwriteしない場合は、filenameの有無チェック
	if(!overwrite){
		memset( &fd, 0, sizeof(fd) );
		fd.dwFileAttributes = FILE_ATTRIBUTE_ARCHIVE;

		// すでに存在する場合はエラーとする
		hFind=FindFirstFile(filename,&fd);
		if( hFind != INVALID_HANDLE_VALUE){
			FindClose(hFind);
			m_Err = -3;		return(FALSE);
		}
		FindClose(hFind);
	}

	// オープン
	if(!XlsOpenBook(filename,templatefile, &m_XlsID)){
		SetErrCode();return(FALSE);
	}

	// 成功
	m_Open=TRUE;
	return(TRUE);
}

//========================================================================================================
//	void TXls::Close(BOOL save);
//  public
//	引数１：TRUE=セーブしてクローズ FALSE=セーブせずにクローズ
//　機能　：開いているファイルをクローズする。
//========================================================================================================
void TXls::Close(BOOL save)
{
	// 未オープン
	if(!m_Open) return;

	// ねんのため
	if(!XlsSelectBook(m_XlsID)){
		SetErrCode();	return;
	}


	// 閉じる
	XlsCloseBook(TRUE);

	m_Open=FALSE;
	m_Err=0;
}


//========================================================================================================
//	BOOL TXls::WriteStr(char* data, long x,long y)
//  public
//　機能　：セル番号を指定して、文字列データを書き込む
//	引数１：書き込みデータ(NULLで終)
//	引数２：セルのＸ位置
//	引数３：セルのＹ位置
//	返値　：TRUE=成功、FALSE=失敗
//========================================================================================================
BOOL TXls::WriteStr(char* data, long x,long y)
{
	// 未オープン
	if(!m_Open){
		m_Err = -4;
		return(FALSE);
	}
	// ねんのため
	if(!XlsSelectBook(m_XlsID)){
		SetErrCode();	return(FALSE);
	}

	// 文字列のチェック
	if( data==NULL ){
		m_Err = -5;		return(FALSE);
	}

	// 文字列のチェックその２
	if( !strlen(data)){
		m_Err = -5;		return(FALSE);
	}

	// 書き込み
	if(!XlsPutStr(data,POS(x,y,x,y))){
		SetErrCode();	return(FALSE);
	}

	return(TRUE);
}

//========================================================================================================
//	BOOL TXls::WriteLong(long data, long x,long y)
//  public
//　機能　：セル番号を指定して、long型データを書き込む
//	引数１：書き込みデータ(NULLで終)
//	引数２：セルのＸ位置
//	引数３：セルのＹ位置
//	返値　：TRUE=成功、FALSE=失敗
//========================================================================================================
BOOL TXls::WriteLong(long data, long x,long y)
{
	// 未オープン
	if(!m_Open){
		m_Err = -4;
		return(FALSE);
	}
	// ねんのため
	if(!XlsSelectBook(m_XlsID)){
		SetErrCode();	return(FALSE);
	}
	// 書き込み
	if(!XlsPutLong(data,POS(x,y,x,y))){
		SetErrCode();	return(FALSE);
	}

	return(TRUE);
}

//========================================================================================================
//	BOOL TXls::WriteDbl(double data, long x,long y)
//  public
//　機能　：セル番号を指定して、double型データを書き込む
//	引数１：書き込みデータ(NULLで終)
//	引数２：セルのＸ位置
//	引数３：セルのＹ位置
//	返値　：TRUE=成功、FALSE=失敗
//========================================================================================================
BOOL TXls::WriteDbl(double data, long x,long y)
{
	// 未オープン
	if(!m_Open){
		m_Err = -4;
		return(FALSE);
	}
	// ねんのため
	if(!XlsSelectBook(m_XlsID)){
		SetErrCode();	return(FALSE);
	}

	// 書き込み
	if(!XlsPutDouble(data,POS(x,y,x,y))){
		SetErrCode();	return(FALSE);
	}

	return(TRUE);
}

//========================================================================================================
//	BOOL TXls::WriteVariant(char* data, long x,long y)
//  public
//　機能　：セル番号を指定して、文字列データを書き込む
//	引数１：書き込みデータ(NULLで終)
//	引数２：セルのＸ位置
//	引数３：セルのＹ位置
//	返値　：TRUE=成功、FALSE=失敗
//========================================================================================================
BOOL TXls::WriteVariant(char* data, long x,long y)
{
	// 未オープン
	if(!m_Open){
		m_Err = -4;
		return(FALSE);
	}
	// ねんのため
	if(!XlsSelectBook(m_XlsID)){
		SetErrCode();	return(FALSE);
	}

	// 文字列のチェック
	if( data==NULL ){
		m_Err = -5;		return(FALSE);
	}

	// 文字列のチェックその２
	if( !strlen(data)){
		m_Err = -5;		return(FALSE);
	}

	// 書き込み
	if(!XlsPutValue(data,POS(x,y,x,y))){
		SetErrCode();	return(FALSE);
	}

	return(TRUE);
}

//========================================================================================================
//	BOOL ReadXls(char* filename);
//  public
//　機能　：読み込みようにエクセルファイルを開く
//	引数１：オープンするエクセルブック名(NULLで終わる拡張子付き。)
//	返値　：TRUE=成功、FALSE=失敗
//========================================================================================================
BOOL TXls::ReadXls(char* filename)
{

	m_Err = 0;

	// すでにオープンしてある
	if( m_Open ){
		m_Err = -1;		return(FALSE);
	}

	// ファイル名のチェック
	if( filename==NULL ){
		m_Err = -2;		return(FALSE);
	}

	// ファイル名のチェックその２
	if( !strlen(filename)){
		m_Err = -2;		return(FALSE);
	}

	// 既存ファイルオープンモード
	else{
		if(!XlsReadBook(filename, &m_XlsID)){
			SetErrCode();return(FALSE);
		}
	}

	// 成功
	m_Open=TRUE;
	return(TRUE);
}

//========================================================================================================
//	BOOL TXls::ReadStr(char* data, int size, long x,long y)
//  public
//　機能　：セル番号を指定して、文字列データを読み込む
//	引数１：読み込みデータ(NULLで終)
//	引数２：セルのＸ位置
//	引数３：セルのＹ位置
//	返値　：TRUE=成功、FALSE=失敗
//========================================================================================================
BOOL TXls::ReadStr(char* data, int size, long x,long y)
{
	// 未オープン
	if(!m_Open){
		m_Err = -4;
		return(FALSE);
	}
	// ねんのため
	if(!XlsSelectBook(m_XlsID)){
		SetErrCode();	return(FALSE);
	}

	// 文字列のチェック
	if( data==NULL ){
		m_Err = -5;		return(FALSE);
	}

	// 文字列のチェックその２
//	if( !strlen(data)){
//		m_Err = -5;		return(FALSE);
//	}

	// 読み込み
	if(!XlsGetStr(data,size,POS(x,y,x,y))){
		SetErrCode();	return(FALSE);
	}

	return(TRUE);
}

//========================================================================================================
//	BOOL TXls::ReadLong(long data, long x,long y)
//  public
//　機能　：セル番号を指定して、long型データを読み込む
//	引数１：読み込みデータ(NULLで終)
//	引数２：セルのＸ位置
//	引数３：セルのＹ位置
//	返値　：TRUE=成功、FALSE=失敗
//========================================================================================================
BOOL TXls::ReadLong(long* data, long x,long y)
{
	// 未オープン
	if(!m_Open){
		m_Err = -4;
		return(FALSE);
	}

	// ねんのため
	if(!XlsSelectBook(m_XlsID)){
		SetErrCode();	return(FALSE);
	}

	// 読み込み
	if(!XlsGetLong(data,POS(x,y,x,y))){
		SetErrCode();	return(FALSE);
	}

	return(TRUE);
}

//========================================================================================================
//	BOOL TXls::ReadDbl(double data, long x,long y)
//  public
//　機能　：セル番号を指定して、double型データを読み込む
//	引数１：読み込みデータ(NULLで終)
//	引数２：セルのＸ位置
//	引数３：セルのＹ位置
//	返値　：TRUE=成功、FALSE=失敗
//========================================================================================================
BOOL TXls::ReadDbl(double* data, long x,long y)
{
	// 未オープン
	if(!m_Open){
		m_Err = -4;
		return(FALSE);
	}
	// ねんのため
	if(!XlsSelectBook(m_XlsID)){
		SetErrCode();	return(FALSE);
	}

	// 読み込み
	if(!XlsGetDouble(data,POS(x,y,x,y))){
		SetErrCode();	return(FALSE);
	}

	return(TRUE);
}

void TXls::SetErrCode(void)
{
	// DLLのエラーコードを取得して、このクラスのerr用のﾒﾝﾊﾞ変数にセットする
	XlsGetErrorNo(&m_Err);

}


BOOL TXls::SetFormat( char* format,long x,long y)
{
	// 未オープン
	if(!m_Open){
		m_Err = -4;
		return(FALSE);
	}
	// ねんのため
	if(!XlsSelectBook(m_XlsID)){
		SetErrCode();	return(FALSE);
	}

	// 書き込み
	if(!XlsPutFormat(format,POS(x,y,x,y))){
		SetErrCode();	return(FALSE);
	}

	return(TRUE);
}


BOOL TXls::SetRowHeight( double h ,long y)
{
	// 未オープン
	if(!m_Open){
		m_Err = -4;
		return(FALSE);
	}
	// ねんのため
	if(!XlsSelectBook(m_XlsID)){
		SetErrCode();	return(FALSE);
	}

	// 書き込み
	if(!XlsPutRowHeight(h,POS(0,y,-1,-1))){
		SetErrCode();	return(FALSE);
	}

	return(TRUE);
}

BOOL TXls::SetColWidth( long w ,long x)
{
	// 未オープン
	if(!m_Open){
		m_Err = -4;
		return(FALSE);
	}
	// ねんのため
	if(!XlsSelectBook(m_XlsID)){
		SetErrCode();	return(FALSE);
	}

	// 書き込み
	if(!XlsPutColWidth(w,POS(x,0,-1,-1))){
		SetErrCode();	return(FALSE);
	}

	return(TRUE);
}

BOOL TXls::CellJoint( BOOL onoff ,long sx, long sy, long ex,long ey)
{
	// 未オープン
	if(!m_Open){
		m_Err = -4;
		return(FALSE);
	}
	// ねんのため
	if(!XlsSelectBook(m_XlsID)){
		SetErrCode();	return(FALSE);
	}

	// 書き込み
	if(!XlsPutJoint(onoff,POS(sx,sy,ex,ey))){
		SetErrCode();	return(FALSE);
	}

	return(TRUE);
}

BOOL TXls::SetPageProperty(char *Size,BOOL Portrait,double HdrMergin,double FrtMergin)
{
	// 未オープン
	if(!m_Open){
		m_Err = -4;
		return(FALSE);
	}
	// ねんのため
	if(!XlsSelectBook(m_XlsID)){
		SetErrCode();	return(FALSE);
	}

	long PageSize,Orientation;

	if(!memcmp(Size,"A3",2)) PageSize = 8;
	else if(!memcmp(Size,"A4",2)) PageSize = 9;
	else if(!memcmp(Size,"A5",2)) PageSize = 11;
	else if(!memcmp(Size,"B4",2)) PageSize = 12;
	else if(!memcmp(Size,"B5",2)) PageSize = 13;
	else  PageSize = 9;

	if( Portrait==TRUE ) Orientation = 2;
	else 	Orientation = 0;

	if(!XlsPageMode( PageSize, -1, Orientation , HdrMergin, FrtMergin)){
		SetErrCode();	return(FALSE);
	}

	return(TRUE);
}

// 余白を示す値をmm単位で設定します。省略する場合は、-1を指定
BOOL  TXls::SetMargin(short Left,short Right,short Top,short Bottom)
{
	
	// 未オープン
	if(!m_Open){
		m_Err = -4;
		return(FALSE);
	}
	// ねんのため
	if(!XlsSelectBook(m_XlsID)){
		SetErrCode();	return(FALSE);
	}

	// 書き込み
	if(!XlsSetMargin( Left, Right, Top, Bottom)){
		SetErrCode();	return(FALSE);
	}

	return(TRUE);
}
//========================================================================================================
//	BOOL XlsPutBox(long LineStyle,long bt,char *Cell)
//	Box罫線の書き込みをします。
//	Cell	対象となるセル範囲を示すChar型のポインタを設定します。カレントセルを対象にする場合は、NULLを設定して下さい。
//	引数 LineStyleの設定値は次のとおりです。
//
//	定数	値	内容
//	lsNone	0x00000000	罫線なし（デフォルト値）
//	lsNormal	0x01000000	実線
//	lsThick	0x02000000	太線
//	lsBroken	0x03000000	破線
//	lsDot	0x04000000	点線
//	lsThick2	0x05000000	極太線
//	lsDouble	0x06000000	二重線
//	lsSlender	0x07000000	細実線
//	lsMidBroken	0x08000000	中破線*
//	lsSlnChain1	0x09000000	細一点鎖線*
//	lsMidChain1	0x0A000000	中一点鎖線*
//	lsSlnChain2	0x0B000000	細二点鎖線*
//	lsMidChain2	0x0C000000	中二点鎖線*
//	lsMidChains	0x0D000000	中一点斜鎖線*
//	xcDefault	0	自動（デフォルト値）
//	xcBlack	8	黒
//	xcWhite	9	白
//	xcRed	10	赤
//	xcGreen	11	緑
//	xcBlue	12	青
//	xcYellow	13	黄色
//	xcPink	14	ピンク
//	xcCyan	15	水色

//	引数 btの設定値は次のとおりです。

//	定数	値	内容

//	btBox	0	箱線（デフォルト値）
//	btLtc	1	格子線
//	btOver	2	上横線
//	btUnder	3	下横線
//	btLeft	4	左縦線
//	btRight	5	右縦線
//========================================================================================================
BOOL  TXls::DrawLine(long LineStyle,long bt,long sx, long sy, long ex,long ey)
{
	// 未オープン
	if(!m_Open){
		m_Err = -4;
		return(FALSE);
	}
	// ねんのため
	if(!XlsSelectBook(m_XlsID)){
		SetErrCode();	return(FALSE);
	}

	// 書き込み
	if(!XlsPutBox( LineStyle, bt, POS(sx,sy,ex,ey))){
		SetErrCode();	return(FALSE);
	}

	return(TRUE);
}



//				2002.10.15 coba 文字の位置指定を追加
BOOL TXls::PutPosHorz(long horz,long x,long y)
{
	// 未オープン
	if(!m_Open){
		m_Err = -4;
		return(FALSE);
	}
	// ねんのため
	if(!XlsSelectBook(m_XlsID)){
		SetErrCode();	return(FALSE);
	}

	// 書き込み
	if(!XlsPutPosHorz( horz,POS(x,y,x,y))){
		SetErrCode();	return(FALSE);
	}

	return(TRUE);
}

