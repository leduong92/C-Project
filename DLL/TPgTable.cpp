//=====================================================================================================================
//
//	FileName	:tpgtable.cpp
//	Class		:TPgTable
//				postgresテーブル操作基底クラス
//	作成日		:2002.05.07	Coded by coba (Oracle版の移植)
//========================================================================================
//	修正
//
//========================================================================================

//#include "stdafx.h"
#include "tpgtable.h"


//---------------------------------------------------------------------------------------------------------------------
//	TPgTable::TPgTable()
//	タイプ：Public
//	機能　：デフォルトコンストラクタ。メンバ変数の初期化
//---------------------------------------------------------------------------------------------------------------------
TPgTable::TPgTable()
{
	m_rowNo=0;
	m_rowMax=0;
	m_selOK=FALSE;
	m_pgDB = NULL;
	m_pgRes = NULL;
}
//---------------------------------------------------------------------------------------------------------------------
//	TPgTable::~TPgTable()
//	タイプ：Public
//	機能　：デストラクタ。オブジェクトやメモリの解放
//	引数１：なし
//---------------------------------------------------------------------------------------------------------------------
TPgTable::~TPgTable()
{
	this->Reset();
}

//---------------------------------------------------------------------------------------------------------------------
//	TPgTable::TPgTable()
//	タイプ：Public
//	機能　：コンストラクタ。メンバ変数の初期化
//	引数１：DB接続オブジェクト(接続済みであること)
//---------------------------------------------------------------------------------------------------------------------
int TPgTable::SetDB(PGconn** pg)
{
	m_pgDB = pg;
	return(0);
}

//---------------------------------------------------------------------------------------------------------------------
//	int TPgTable::ChkConnect(void)
//	タイプ：protected
//	機能　：DB接続状況を調べ、切れていたら再接続する
//	戻り値：0=成功 
//			-100=接続が無効 
//			-101 再接続に失敗
//	2007.12.10 coba PS_IsConnect()が切断してもCONNECTION_OKしか返さないので、
//					システムテーブルの検索結果により再接続をトライする
//---------------------------------------------------------------------------------------------------------------------
int TPgTable::ChkConnect(void)
{
	if(m_pgDB == NULL) return(-100);

	int ret;

	// システムカタログを検索
	ret = PS_Select( *m_pgDB,&m_pgRes, "select * from pg_tables limit 1");
	//2009.03.31 ﾏﾂﾀﾞ Resetしていないバグ修正(カーソルの解放し忘れ)
	Reset();
	// 検索失敗or該当なし
	if( ret <=0 ){
		// 再接続する
//		printf("\n再接続トライ");
		if( PS_ReConnect(m_pgDB)) return(-101);
//		printf("\n再接続トライOK");
	}
	return(0);
}

//---------------------------------------------------------------------------------------------------------------------
//	int TPgTable::Next(void)
//	タイプ：Public
//	機能　：カレントレコードの移動
//	引数１：なし
//---------------------------------------------------------------------------------------------------------------------
int TPgTable::MoveNext(void)
{

	if(m_pgDB == NULL) return(-100);

	if( m_selOK==FALSE || m_rowMax <=0)return(-1);

	if( ++m_rowNo >= m_rowMax){
		this->Reset();
		return(-1);
	}

	Attach();
	return(0);
}
//---------------------------------------------------------------------------------------------------------------------
//	int TPgTable::Next(void)
//	タイプ：Public
//	機能　：カレントレコードの移動
//	引数１：なし
//---------------------------------------------------------------------------------------------------------------------
int TPgTable::MovePrev(void)
{

	if(m_pgDB == NULL) return(-100);

	if( m_selOK==FALSE || m_rowMax <=0)return(-1);

	if( --m_rowNo <0 ){
		this->Reset();
		return(-1);
	}

	Attach();
	return(0);
}
//---------------------------------------------------------------------------------------------------------------------
//	int TPgTable::Next(void)
//	タイプ：Public
//	機能　：カレントレコードの移動
//	引数１：なし
//---------------------------------------------------------------------------------------------------------------------
int TPgTable::MoveFirst(void)
{

	if(m_pgDB == NULL) return(-100);

	if( m_selOK==FALSE || m_rowMax <=0)return(-1);

	m_rowNo=0;

	Attach();
	return(0);
}
//---------------------------------------------------------------------------------------------------------------------
//	int TPgTable::Next(void)
//	タイプ：Public
//	機能　：カレントレコードの移動
//	引数１：なし
//---------------------------------------------------------------------------------------------------------------------
int TPgTable::MoveLast(void)
{

	if(m_pgDB == NULL) return(-100);

	if( m_selOK==FALSE || m_rowMax <=0)return(-1);

	m_rowNo=m_rowMax-1;

	Attach();
	return(0);
}

//---------------------------------------------------------------------------------------------------------------------
//	int TPgTable::Sel(char* sql)
//	タイプ：protected
//	機能　：select実行
//	引数１：実行するselect文
//	戻り値：0=成功 
//			-100=接続が無効 
//			-101 再接続に失敗
//---------------------------------------------------------------------------------------------------------------------
int TPgTable::Sel(char* sql)
{
	int ret;


	// 閉じる
	this->Reset();

	ret = PS_Select( *m_pgDB,&m_pgRes, sql);

	// 一度失敗したら接続確認
	if(ret< 0 ){
		// DBの接続を確認
		ret=this->ChkConnect();
		if( ret ) return(ret);
		// 検索やり直し
//printf("\n再検索します..");
		this->Reset();
		ret = PS_Select( *m_pgDB,&m_pgRes, sql);
	}

	// 検索失敗or該当なし
	if( ret <=0 ){
		this->Reset();
		//PS_Close( m_pgRes);
		return(-1);
	}

	m_rowMax = ret;
	m_selOK=TRUE;
	return(0);
}
//---------------------------------------------------------------------------------------------------------------------
//	int TPgTable::Exec(char* sql)
//	タイプ：protected
//	機能　：sqlの実行(insert,select delete)
//	引数１：実行するsql文

//---------------------------------------------------------------------------------------------------------------------
int TPgTable::Exec(char* sql)
{
	int ret;

	ret=PS_Exec(*m_pgDB,sql);
	if( ret==3 ) return(ret);	// コマンドはＯＫだけど影響0件
	if( ret==2 ) return(ret);	// SQL実行のｴﾗｰ(接続の切断状態とは違うはず) 2009.03.31
	
	// 一度失敗したら再接続トライ
	if(ret){
		// DBの接続を確認
		ret=this->ChkConnect();
		if(ret) return(ret);
		ret=PS_Exec(*m_pgDB,sql);
	}
	return(ret);
}

//---------------------------------------------------------------------------------------------------------------------
//	int TPgTable::Next(void)
//	タイプ：private
//	機能　：select用のオブジェクトやメモリの解放
//	引数１：なし
//---------------------------------------------------------------------------------------------------------------------
void TPgTable::Reset(void)
{
	if(m_pgRes !=NULL){
		PS_Close( m_pgRes);
		m_pgRes=NULL;
	}
	m_rowNo=0;
	m_rowMax=0;
	m_selOK=FALSE;
}

//---------------------------------------------------------------------------------------------------------------------
//	char* TPgTable::Columns(char* fldname)
//	タイプ：protected
//	機能　：フィールドデータの取得
//---------------------------------------------------------------------------------------------------------------------
char* TPgTable::Columns(char* fldname)
{
	return(PS_Col( m_pgRes, m_rowNo,fldname));
}
//---------------------------------------------------------------------------------------------------------------------
//	void CMGenyakuSiyoMst::Attach(void)
//	タイプ：public
//	機能　：カレントデータ取得(ダミー)
//---------------------------------------------------------------------------------------------------------------------
void TPgTable::Attach(void)
{
}


